#include <SFML/Graphics.hpp>
#include <iostream>
#include <time.h>
#include <string>

using namespace std;
using namespace sf;

const int M = 20; //висота ігрового поля
const int N = 10;//ширина ігрового поля

int myArr[M][N] { };//ігрове поле //Масив фігурок - тетраміно

int figures [7][4] =
        {1,3,5,7,//I
        2,4,5,7,//S
        3,5,4,6,//Z
        3,5,4,7,//T
        2,3,5,7,//L
        3,5,7,6,//J
        2,3,4,5,//O
        };

class Tetramino
{   public:
    int color { };
    int type  { };
    int blockPositions[4] {};
    struct Coordinates
    {int x; int y;};
    Coordinates coordinates [4]{ };
    int figures [7][4] =
            {1,3,5,7,//I
                    2,4,5,7,//S
                    3,5,4,6,//Z
                    3,5,4,7,//T
                    2,3,5,7,//L
                    3,5,7,6,//J
                    2,3,4,5,//O
            };
    void create ()
       {color = 1 + rand() % 7;
        type = rand() % 7;
       for (int i = 0; i < 4; i++)
       {blockPositions[i] = figures [type][i];}
       for (int i = 0; i < 4; i++)
       {coordinates[i].x = blockPositions[i] % 2 + 3;
           coordinates[i].y = blockPositions[i] / 2;}
       };
    void draw (RenderWindow&thatWindow, Sprite&thatSprite, int marginLeft, int marginTop)//малюємо тетраміно з класу Tetramino
       {for (int i = 0; i < 4; i++)
           { thatSprite.setTextureRect(IntRect(color * 18, 0, 18, 18));//розмальовуємо тетраміно
             thatSprite.setPosition(coordinates[i].x * 18, coordinates[i].y * 18 );//встановлюємо позицію кожного шматочка тетраміно
             thatSprite.move (marginLeft, marginTop);//зміщення
             thatWindow.draw(thatSprite);}};//малювання спрайта

    bool check() { for (int i = 0; i < 4; i++) //перевірка на вихід за межі поля
           { if (coordinates[i].x < 0 || coordinates[i].x >= N || coordinates[i].y >= M)
           {return false;}
           else if (myArr[coordinates[i].y][coordinates[i].x])
           {return false;}}
           return true;}

    void moveDown (sf::RenderWindow&thatWindow) {
            int x[4]{};
            int y[4]{};
            for (int i = 0; i < 4; i++)
                {y[i] = coordinates[i].y;
                x[i] = coordinates[i].x; }
            for (int i = 0; i < 4; i++)
                {coordinates[i].y += 1;}
            if (check() == false)
                {for (int i = 0; i < 4; i++)
                {    coordinates[i].y = y[i];
                    myArr[y[i]][x[i]] = color;}
                create();
                if (check() == false)
                {cout << "GAME OVER" << endl;
                    thatWindow.close();}}}

    void moveHoriz(RenderWindow&thatWindow, int direction) {
           int x[4]{};
           int y[4]{};
           for (int i = 0; i < 4; i++)
               { y[i] = coordinates[i].y;
               x[i] = coordinates[i].x; }
           for (int i = 0; i < 4; i++)
               { coordinates[i].x += direction; }
           if (check() == false) {
               for (int i = 0; i < 4; i++) {
                   coordinates[i].x = x[i]; }} }

    void rotate()
      {   int x[4]{};
          int y[4]{};
          for (int i = 0; i < 4; i++)
      {   y[i] = coordinates[i].y;
          x[i] = coordinates [i].x; }
          int originX = coordinates[1].x; //вказуємо X центр обертання
          int originY = coordinates [1].y;//вказуємо Y центр обертання
          for (int i = 0; i < 4; i++)
      {int dy = coordinates[i].y - originY; //y-yO
          int dx = coordinates[i].x - originX; // x-x)
          coordinates[i].x = originX - dy; //x_2 = x_0 - dy
          coordinates[i].y = originY + dx;} // y_2 = y_0 + dx
          if (check() ==false) {
        for (int i = 0; i < 4; i++)
       coordinates[i].x = x[i];}}};

int checkLine (int&userPoints)
{int  k = M - 1; //строка k-сама нижня
 for (int i = M - 1; i>0;i--)//i пробігає всі строки снизу до верху// на початку k та i співпадають
     {int count = 0;
        for (int j = 0; j<N;j++)
        {if (myArr[i][j])
            count++;
            myArr[k][j] = myArr[i][j];}
        if (count < N)
        k--;
        else  userPoints += 1;}
    return userPoints;}

int main () {
    srand(time(0));
    int window_width{640};
    int window_heigth{960};
    int userPoints{0};
    Tetramino tetramino;

    tetramino.create();
    RenderWindow window(VideoMode(window_width, window_heigth), "TETRIS!");
//створення та завантаження текстур
    Texture texture, texture_background, texture_frame;
    texture.loadFromFile("tiles.png");
    texture_background.loadFromFile("lego.png");
    texture_frame.loadFromFile("frame.png");

    //Створення спрайта
    Sprite sprite (texture), sprite_background(texture_background), sprite_frame(texture_frame);
    //вирізаємо зі спрайта окремий квадрат розміром 18х18
    sprite.setTextureRect(IntRect(0,0,18,18));

    float timer = 0;//Змінні для таймера та затримки
    float delay = 0.5;

    Clock clock;
// головний цикл додатку: виконується поки відчинено вікно
    while (window.isOpen())
    {   float time = clock.getElapsedTime().asSeconds();//отримуємо час, який пройшов з початку відліку та конвертуємо його в секунду
        clock.restart();
        timer +=time;

        Event event; //опрацьовуємо події у циклі
        while (window.pollEvent(event))
        {
            if (event.type == Event::Closed)
                window.close();
            if (event.type == Event::KeyPressed)
            {   if (event.key.code == Keyboard::Left)
                    tetramino.moveHoriz(window, -1);
                else if (event.key.code == Keyboard::Right)
                    tetramino.moveHoriz(window,1);
                else if (event.key.code == Keyboard::Up)
                    tetramino.rotate();}
            if (Keyboard::isKeyPressed(Keyboard::Down)) delay = 0.05;}
        if (timer>delay)
        {tetramino.moveDown(window);
            timer = 0;}
        checkLine(userPoints);
        delay = 0.5;

        window.clear(sf::Color ::White);
      window.draw(sprite_background);
        int tetrisFeildTop{50};
        int tetrisFeildLeft{70};
        for (int varHeight = 0; varHeight < M; varHeight++)
        { for (int j = 0; j < N; j++)
            { if (myArr[varHeight][j] == 0)
                {   sprite.setTextureRect(sf::IntRect(8*18,0,18,18));
                    sprite.setPosition(tetrisFeildLeft + j*18, tetrisFeildTop + varHeight*18);
                    window.draw (sprite);}
                else
                {sprite.setTextureRect(sf::IntRect(myArr[varHeight][j]*18,0,18,18));}
                sprite.setPosition(tetrisFeildLeft + j*18, tetrisFeildTop + varHeight *18);
                sprite.move (0,0);
                window.draw(sprite);}
        }
        tetramino.draw (window, sprite, tetrisFeildLeft, tetrisFeildTop);

        sf::Font font;
        if (!font.loadFromFile("Roboto-Regular.ttf")){}
        sf::Text text;
        text.setFont(font);
        std::string userPointsString = "Score: " + std:: to_string (userPoints);
        text.setString(userPointsString);
        text.setCharacterSize(45);
        text.setFillColor(sf::Color::Magenta);
        text.setStyle(sf::Text::Bold | sf::Text::Underlined);
        text.setPosition (400.f, 10.f);
        window.draw (text);
        window.display();

    }
   return 0;
}
